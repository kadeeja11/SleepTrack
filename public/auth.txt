const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const jwt = require('jsonwebtoken');
const expressJwt = require('express-jwt');
const UserModel = require('./models/User');
const cors = require('cors');
const mongoose = require('mongoose')

// Initialize Express app
const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/SleepTracker', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('Error connecting to MongoDB:', err));

// Configure middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Configure Passport local strategy
passport.use(new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password'
}, async (email, password, done) => {
  try {
    // Find user by email
    const user = await UserModel.findOne({ email });

    // If user not found or password incorrect, return error
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return done(null, false, { message: 'Invalid email or password' });
    }

    // If user found and password correct, return user object
    return done(null, user);
  } catch (error) {
    return done(error);
  }
}));

// Route to handle user login
app.post('api/login', passport.authenticate('local', { session: false }), (req, res) => {
  // Generate JWT token
  const token = jwt.sign({ userId: req.user._id }, 'secretKey');
  res.json({ token });
});

// Protect routes with JWT middleware
app.use(jwt({ secret: 'secretKey', algorithms: ['HS256'] }).unless({ path: ['/api/login', '/api/signup'] }));
// Route to handle user signup
app.post('api/signup', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    // Check if email is already registered
    const existingUser = await UserModel.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already registered' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create new user
    const newUser = new UserModel({ username, email, password: hashedPassword });
    await newUser.save();

    return res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error('Error signing up:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
